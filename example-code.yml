#SLACK NOTIFICATION
#Code that needed change in /usr/lib/python2.6/site-packages/ansible/module_utils/urls.py
#https support not offered
#try:
#            if https_proxy:
#                proxy_parts = generic_urlparse(urlparse(https_proxy))
#                port = proxy_parts.get('port') or 443
#                s = socket.create_connection((proxy_parts.get('hostname'), port))
#                if proxy_parts.get('scheme') in ('https' or 'http'): #amended here to include httpd
#                    s.sendall(to_bytes(self.CONNECT_COMMAND % (self.hostname, self.port), errors='surrogate_or_strict'))
---
  - name: Slack Notification
    gather_facts: no
    environment:
      https_proxy: https://<proxyurl>:<port>
    hosts: slack
    #connection: local
    #sample task included
    tasks:
      - name: Checking uptime
        shell: /sbin/ifconfig etho
        register: command_output
      - debug:
          var: command_output

      - name: Create Directory
        file:
          path: /tmp/kshivan/ansible/test
          #state: absent
          state: directory
          recurse: yes

      - name: Send notification message via Slack
        slack:
          token: xxxxxx/xxxxxxx/xxxxxxxxxxxxxxxxxxxxx
          channel: "#channelnamehere"
          msg: "Testing slack notification"

##-----------------------------------------------------------------------------------------------
#ssh trust playbook
---
  - name: Setting up trust
    gather_facts: false
    tasks:
      - name: Set authorized_key
        authorized_key:
          user: root
          state: present
          key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"

#role for ssh trust
---
  - name: Setting up trust
    hosts: host
    gather_facts: false
    vars:
      username: kshivan
    tasks:
    - name:
      shell: >
        getent passwd "{{ username }}" | cut -d: -f6
      changed_when: false
      register: user_home

    - name: debug output
      debug: var=user_home.stdout

    - name: Set authorized_key
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', '{{ user_home.stdout }}/.ssh/id_rsa.pub') }}"

##-----------------------------------------------------------------------------------------------
# To back up files in a given directory
- hosts: all
  tasks:
  - name: caputure output and loop
    shell: "find *.txt"
    args:
      chdir: "/tmp/kshivan/ansible/test"
    register: with_output

  - shell: "cp {{ item }} {{item}}_bkp"
    with_items:
      - "{{ with_output.stdout_lines }}"

##-----------------------------------------------------------------------------------------------
---
  - name: Trial PplayBook
    hosts: onehost
    gather_facts: false
    tasks:
      - name: execute scripts
        script: /u/users/svchdpdb/scripts/ambaritrust/pushkeytab_auto.sh Ibanezjrg2@ /tmp/hosts.txt
##-----------------------------------------------------------------------------------------------
---
  - name: Trial PplayBook
    hosts: onehost
    gather_facts: false
    pre_tasks:
      - name: Checking firewall status and sending slack notification
        command: uptime
        register: command_output
      - debug:
          var: command_output.stdout_lines
    roles:
    tasks:

##-----------------------------------------------------------------------------------------------
#To connect to remote host and run command as root. playbook would be run as an adhoc user
---
  - name: Trial PplayBook
    hosts: onehost
    gather_facts: false
    tasks:
      - name: Run a command as nobody
        command: who
        become: yes
        become_method: dzdo
        become_user: root
        register: command_output
      - debug:
          var: command_output.stdout_lines
      - script: /u/users/svchdpdb/scripts/ambaritrust/pushkeytab_auto.sh Ibanezjrg2@ /tmp/hosts.txt
        register: command_output1
      - debug:
          var: command_output1.stdout_lines

##-----------------------------------------------------------------------------------------------
#To set up root trust -- playbook
#To connect to remote host and run command as root. playbook would be run as an adhoc user
---
  - name: Trial PplayBook
    hosts: onehost
    gather_facts: false
    tasks:
      - name: Run a command as nobody
        command: who
        become: yes
        become_method: dzdo
        become_user: root
        register: command_output
      - debug:
          var: command_output.stdout_lines
      - script: /u/users/svchdpdb/scripts/ambaritrust/pushkeytab_auto.sh Ibanezjrg2@ /tmp/hosts.txt
      #- script: /u/users/svchdpdb/scripts/ambaritrust/pushkeytab_auto.sh "{{ your_ad_password}}" "{{ path_to_hosts_file}}"
        register: command_output1
      - debug:
          var: command_output1.stdout_lines

ansible-playbook ssh_test.yml --extra-vars "your_ad_password=Ibanezjrg2@ path_to_hosts_file=/tmp/hosts.txt" --ask-pass
your_ad_password
path_to_hosts_file

##-----------------------------------------------------------------------------------------------
#To set up root trust -- role -- goes into the roles folder tasks/main.yml
---
  - name: ssh root trust
    command: who
    become: yes
    become_method: dzdo
    register: command_output
  - debug:
      var: command_output.stdout_lines
  - script: /u/users/svchdpdb/scripts/ambaritrust/pushkeytab_auto.sh  "{{ your_ad_password}}" "{{ path_to_hosts_file}}" "{{ username }}"
    register: command_output1
  - debug:
      var: command_output1.stdout_lines
##-----------------------------------------------------------------------------------------------
AFAIK, there is no method to set persistant custom environmental variable using ansible.
However, you can set the variables in .profile and use fetch that value or set it on command line and then run the play book.
$ export SYMFONY_ENV=development
---
  - name: Setting Up ssh trust for root user
    hosts: local
    gather_facts: false
    #environment:
    #  SYMFONY_ENV: development
    tasks:
      - name: date
        command: date
      - debug:
          msg: "{{ lookup('env','SYMFONY_ENV') }} is an environment variable"
##-----------------------------------------------------------------------------------------------

##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------
